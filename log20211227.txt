2021-12-27 10:58:18.152 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 10:58:18.177 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 10:58:18.177 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 10:58:19.759 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 10:58:20.022 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 10:58:20.023 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 10:58:20.023 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 10:58:20.024 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 10:58:22.231 +05:00 [INFO] [0HME8VNH86HI5:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 10:58:22.361 +05:00 [INFO] [0HME8VNH86HI5:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 10:58:23.210 +05:00 [INFO] [0HME8VNH86HI5:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 10:58:23.378 +05:00 [INFO] [0HME8VNH86HI5:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 10:58:32.703 +05:00 [INFO] [0HME8VNH86HI6:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/api/v1/users], Request Body: []
2021-12-27 10:58:36.147 +05:00 [EROR] [0HME8VNH86HI6:00000001] An unhandled exception has occurred while executing the request.
System.TypeInitializationException: The type initializer for 'DigitalBanking.ServiceExtensions.LoggerExtensions' threw an exception.
 ---> System.ArgumentException: The format string ''{message}'' does not have the expected number of named parameters. Expected 2 parameter(s) but found 1 parameter(s).
   at Microsoft.Extensions.Logging.LoggerMessage.CreateLogValuesFormatter(String formatString, Int32 expectedNamedParameterCount)
   at Microsoft.Extensions.Logging.LoggerMessage.Define[T1,T2](LogLevel logLevel, EventId eventId, String formatString, LogDefineOptions options)
   at Microsoft.Extensions.Logging.LoggerMessage.Define[T1,T2](LogLevel logLevel, EventId eventId, String formatString)
   at DigitalBanking.ServiceExtensions.LoggerExtensions..cctor() in E:\sanaFolder\TeamArchitects\code\AppNet6\ServiceExtensions\LoggerExtensions.cs:line 38
   --- End of inner exception stack trace ---
   at DigitalBanking.ServiceExtensions.LoggerExtensions.LogInfo(ILogger logger, String module, String message, Exception ex) in E:\sanaFolder\TeamArchitects\code\AppNet6\ServiceExtensions\LoggerExtensions.cs:line 78
   at AppNet6.Modules.UserModule.getUser() in E:\sanaFolder\TeamArchitects\code\AppNet6\Modules\UserModule.cs:line 35
   at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteTaskResult[T](Task`1 task, HttpContext httpContext)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2021-12-27 10:58:39.114 +05:00 [INFO] [0HME8VNH86HI6:00000001] Response Body: System.TypeInitializationException: The type initializer for 'DigitalBanking.ServiceExtensions.LoggerExtensions' threw an exception.
 ---> System.ArgumentException: The format string ''{message}'' does not have the expected number of named parameters. Expected 2 parameter(s) but found 1 parameter(s).
   at Microsoft.Extensions.Logging.LoggerMessage.CreateLogValuesFormatter(String formatString, Int32 expectedNamedParameterCount)
   at Microsoft.Extensions.Logging.LoggerMessage.Define[T1,T2](LogLevel logLevel, EventId eventId, String formatString, LogDefineOptions options)
   at Microsoft.Extensions.Logging.LoggerMessage.Define[T1,T2](LogLevel logLevel, EventId eventId, String formatString)
   at DigitalBanking.ServiceExtensions.LoggerExtensions..cctor() in E:\sanaFolder\TeamArchitects\code\AppNet6\ServiceExtensions\LoggerExtensions.cs:line 38
   --- End of inner exception stack trace ---
   at DigitalBanking.ServiceExtensions.LoggerExtensions.LogInfo(ILogger logger, String module, String message, Exception ex) in E:\sanaFolder\TeamArchitects\code\AppNet6\ServiceExtensions\LoggerExtensions.cs:line 78
   at AppNet6.Modules.UserModule.getUser() in E:\sanaFolder\TeamArchitects\code\AppNet6\Modules\UserModule.cs:line 35
   at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteTaskResult[T](Task`1 task, HttpContext httpContext)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)

HEADERS
=======
Accept: */*
Host: localhost:7224
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36
:method: GET
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Cookie: ai_user=Y7j83|2021-12-17T11:23:52.267Z,grafana_session=cdd574ff8beffd05f7f3668615d49285
Referer: https://localhost:7224/index.html
sec-ch-ua: " Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: "Windows"
sec-fetch-site: same-origin
sec-fetch-mode: cors
sec-fetch-dest: empty

2021-12-27 11:14:13.253 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 11:14:13.269 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 11:14:13.270 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 11:14:15.091 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 11:14:15.334 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 11:14:15.335 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 11:14:15.335 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 11:14:15.336 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 11:14:16.912 +05:00 [INFO] [0HME900DUEG18:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 11:14:17.145 +05:00 [INFO] [0HME900DUEG18:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 11:14:17.617 +05:00 [INFO] [0HME900DUEG18:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 11:14:17.994 +05:00 [INFO] [0HME900DUEG18:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 11:14:23.510 +05:00 [INFO] [0HME900DUEG19:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/api/v1/users], Request Body: []
2021-12-27 11:14:30.243 +05:00 [INFO] [0HME900DUEG19:00000001] module: 'UserModule' Message = Get users v1 called.)
2021-12-27 13:09:29.761 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 13:09:29.787 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 13:09:29.787 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 13:09:30.912 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 13:09:31.242 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 13:09:31.244 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 13:09:31.245 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 13:09:31.245 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 13:09:34.266 +05:00 [INFO] [0HME920QV8DCI:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 13:10:23.591 +05:00 [INFO] [0HME920QV8DCI:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 13:10:24.289 +05:00 [INFO] [0HME920QV8DCI:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 13:10:25.838 +05:00 [INFO] [0HME920QV8DCI:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 13:10:33.595 +05:00 [INFO] [0HME920QV8DCJ:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/api/v1/users], Request Body: []
2021-12-27 13:10:36.140 +05:00 [INFO] [0HME920QV8DCJ:00000001] module: 'UserModule' Message = Get users v1 called.)
2021-12-27 13:10:42.823 +05:00 [INFO] [0HME920QV8DCJ:00000001] Response Body: {"name":"sana","contact":"03323344553"}
2021-12-27 14:09:17.504 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 14:09:17.534 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 14:09:17.534 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 14:09:19.179 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 14:09:19.676 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 14:09:19.680 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 14:09:19.681 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 14:09:19.683 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 14:09:21.690 +05:00 [INFO] [0HME9328CBESJ:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 14:09:24.646 +05:00 [INFO] [0HME9328CBESJ:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 14:09:25.389 +05:00 [INFO] [0HME9328CBESJ:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 14:09:27.009 +05:00 [INFO] [0HME9328CBESJ:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 14:09:39.198 +05:00 [INFO] [0HME9328CBESK:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/health], Request Body: []
2021-12-27 14:09:44.422 +05:00 [INFO] [0HME9328CBESK:00000001] Response Body: Healthy
2021-12-27 14:15:46.345 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 14:15:46.357 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 14:15:46.357 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 14:15:46.826 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 14:15:47.214 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 14:15:47.216 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 14:15:47.216 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 14:15:47.217 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 14:15:48.661 +05:00 [INFO] [0HME935RQG653:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 14:15:51.154 +05:00 [INFO] [0HME935RQG653:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 14:15:51.526 +05:00 [INFO] [0HME935RQG653:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 14:15:52.323 +05:00 [INFO] [0HME935RQG653:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 14:16:01.439 +05:00 [INFO] [0HME935RQG653:00000007] Http Method: [GET], Protoclol [HTTP/2], Path [/health], Request Body: []
2021-12-27 14:16:06.665 +05:00 [INFO] [0HME935RQG653:00000007] Response Body: Healthy
2021-12-27 14:16:24.448 +05:00 [INFO] [0HME935RQG654:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/health], Request Body: []
2021-12-27 14:16:38.480 +05:00 [INFO] [0HME935RQG654:00000001] Response Body: Healthy
2021-12-27 14:33:52.703 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 14:33:52.736 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 14:33:52.736 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 14:44:10.051 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 14:44:10.062 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 14:44:10.063 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 14:44:45.607 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 14:44:45.616 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 14:44:45.616 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 14:44:46.708 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 14:44:47.251 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 14:44:47.254 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 14:44:47.254 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 14:44:47.259 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 14:44:49.459 +05:00 [INFO] [0HME93M2CC0P8:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 14:44:55.167 +05:00 [INFO] [0HME93M2CC0P8:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 14:44:55.878 +05:00 [INFO] [0HME93M2CC0P8:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 14:44:56.976 +05:00 [INFO] [0HME93M2CC0P8:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 14:45:05.041 +05:00 [INFO] [0HME93M2CC0P9:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/healthz/ready], Request Body: []
2021-12-27 14:45:12.587 +05:00 [INFO] [0HME93M2CC0P9:00000001] Response Body: Healthy
2021-12-27 14:45:18.703 +05:00 [INFO] [0HME93M2CC0PA:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/healthz/live], Request Body: []
2021-12-27 14:45:26.476 +05:00 [INFO] [0HME93M2CC0PA:00000001] Response Body: Healthy
2021-12-27 14:54:45.616 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 14:54:45.651 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 14:54:45.652 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 14:54:46.538 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 14:54:46.967 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 14:54:46.969 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 14:54:46.969 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 14:54:46.970 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 14:54:49.753 +05:00 [INFO] [0HME93RL65PTL:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 14:54:51.715 +05:00 [INFO] [0HME93RL65PTL:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 14:54:52.684 +05:00 [INFO] [0HME93RL65PTL:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 14:54:54.512 +05:00 [INFO] [0HME93RL65PTL:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 14:55:00.913 +05:00 [INFO] [0HME93RL65PTM:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/healthz/live], Request Body: []
2021-12-27 14:55:09.012 +05:00 [INFO] [0HME93RL65PTM:00000001] Response Body: Healthy
2021-12-27 14:55:15.174 +05:00 [INFO] [0HME93RL65PTM:00000003] Http Method: [GET], Protoclol [HTTP/2], Path [/healthz/ready], Request Body: []
2021-12-27 14:55:19.026 +05:00 [INFO] [0HME93RL65PTM:00000003] Response Body: Healthy
2021-12-27 14:56:56.162 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 14:56:56.179 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 14:56:56.179 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 14:56:58.735 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 14:56:58.899 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 14:56:58.900 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 14:56:58.901 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 14:56:58.902 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 14:57:00.498 +05:00 [INFO] [0HME93SSIRVJN:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 14:57:00.603 +05:00 [INFO] [0HME93SSIRVJN:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 14:57:00.979 +05:00 [INFO] [0HME93SSIRVJN:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 14:57:01.168 +05:00 [INFO] [0HME93SSIRVJN:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 14:57:12.322 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 14:57:12.335 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 14:57:12.335 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 14:57:13.748 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 14:57:13.975 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 14:57:13.976 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 14:57:13.977 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 14:57:13.978 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 14:57:16.349 +05:00 [INFO] [0HME93T1317D1:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 14:57:16.438 +05:00 [INFO] [0HME93T1317D1:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 14:57:16.755 +05:00 [INFO] [0HME93T1317D1:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 14:57:16.901 +05:00 [INFO] [0HME93T1317D1:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 14:57:27.833 +05:00 [INFO] [0HME93T1317D2:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/healthz/ready], Request Body: []
2021-12-27 14:57:27.856 +05:00 [EROR] [0HME93T1317D2:00000001] Health check Startup with status "Unhealthy" completed after 1.5198ms with message 'That startup task is still running.'
2021-12-27 14:57:27.871 +05:00 [INFO] [0HME93T1317D2:00000001] Response Body: Unhealthy
2021-12-27 14:57:33.769 +05:00 [INFO] [0HME93T1317D2:00000003] Http Method: [GET], Protoclol [HTTP/2], Path [/healthz/ready], Request Body: []
2021-12-27 14:57:33.771 +05:00 [INFO] [0HME93T1317D2:00000003] Response Body: Healthy
2021-12-27 23:04:54.309 +05:00 [DBUG] [] Found validator UserValidator
2021-12-27 23:04:54.333 +05:00 [DBUG] [] Found module DigitalBanking.Modules.PaymentModule
2021-12-27 23:04:54.333 +05:00 [DBUG] [] Found module AppNet6.Modules.UserModule
2021-12-27 23:05:19.668 +05:00 [INFO] [] Now listening on: https://localhost:7224
2021-12-27 23:05:19.964 +05:00 [INFO] [] Now listening on: http://localhost:5180
2021-12-27 23:05:19.965 +05:00 [INFO] [] Application started. Press Ctrl+C to shut down.
2021-12-27 23:05:19.966 +05:00 [INFO] [] Hosting environment: Development
2021-12-27 23:05:19.967 +05:00 [INFO] [] Content root path: E:\sanaFolder\TeamArchitects\code\AppNet6\
2021-12-27 23:05:50.808 +05:00 [INFO] [0HME9CDOVUC6R:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/index.html], Request Body: []
2021-12-27 23:05:51.037 +05:00 [INFO] [0HME9CDOVUC6R:00000001] Response Body: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2021-12-27 23:05:52.510 +05:00 [INFO] [0HME9CDOVUC6R:00000005] Http Method: [GET], Protoclol [HTTP/2], Path [/swagger/v1/swagger.json], Request Body: []
2021-12-27 23:05:52.731 +05:00 [INFO] [0HME9CDOVUC6R:00000005] Response Body: {
  "openapi": "3.0.1",
  "info": {
    "title": "Digital banking APIs",
    "description": "Digital banking APIs",
    "contact": {
      "name": "Sana",
      "url": "https://github.com/nikiforovall"
    },
    "version": "v1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "DigitalBanking"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payment": {
      "post": {
        "tags": [
          "PaymentModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "UserModule"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "UserModule"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "tags": [
          "v2Users"
        ],
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
2021-12-27 23:06:01.464 +05:00 [INFO] [0HME9CDOVUC6S:00000001] Http Method: [POST], Protoclol [HTTP/2], Path [/v1/payment], Request Body: []
2021-12-27 23:06:01.515 +05:00 [INFO] [0HME9CDOVUC6S:00000001] Response Body: {"error":"OTP validation failed."}
2021-12-27 23:06:14.291 +05:00 [INFO] [0HME9CDOVUC6T:00000001] Http Method: [POST], Protoclol [HTTP/2], Path [/v1/payment], Request Body: []
2021-12-27 23:06:14.292 +05:00 [INFO] [0HME9CDOVUC6T:00000001] Response Body: {"error":"OTP validation failed."}
2021-12-27 23:06:14.981 +05:00 [INFO] [0HME9CDOVUC6T:00000003] Http Method: [POST], Protoclol [HTTP/2], Path [/v1/payment], Request Body: []
2021-12-27 23:06:14.987 +05:00 [INFO] [0HME9CDOVUC6T:00000003] Response Body: {"error":"OTP validation failed."}
2021-12-27 23:06:39.878 +05:00 [INFO] [0HME9CDOVUC6U:00000001] Http Method: [GET], Protoclol [HTTP/2], Path [/api/v1/users], Request Body: []
2021-12-27 23:06:44.870 +05:00 [INFO] [0HME9CDOVUC6U:00000001] module: 'UserModule' Message = Get users v1 called.)
2021-12-27 23:06:46.121 +05:00 [INFO] [0HME9CDOVUC6U:00000001] Response Body: {"name":"sana","contact":"03323344553"}
